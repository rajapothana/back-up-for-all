}
console.log(x)
for(x of a){
}
console.log(x)
for(x in a){
a = [1,2,3,4,5,5]
generateLeftAlignedTriangle(5)
}
   return createTriangle(height, leftJustifyLine);;
const generateLeftAlignedTriangle = function(height) {
};
  return triangle;
  }
    delimitor = '\n';
    triangle = joinLines(triangle, justifiedLine, delimitor);
    let justifiedLine = justifier(line, height);
    let line = filledLineGenerator(row);
  for (let row = 1; row <= height; row++) {
  let delimitor = '';
  let triangle = '';
const createTriangle = function(height, justifier) {
const filledLineGenerator = createLineGenerator('*', '*', '*');
};
  };
    return createLine(width, leftChar, middleChar, rightChar);
  let lineGenerator = function(width) {
const createLineGenerator = function(leftChar, middleChar, rightChar) {
};
  return left + middle + right;
const createLine = function(width, leftChar, middleChar, rightChar) {
};
  return text;
const leftJustifyLine = function(text, width) {
};
  return spaces + text;
  let spaces = generateLine(' ', numberOfSpaces);
  let numberOfSpaces = width - text.length;
const rightJustifyLine = function(text, width) {
};
  return previous + delimitor + lineToJoin;
const joinLines = function(previous, lineToJoin, delimitor) {
createLeftTriangle(5)
};
  return createTriangle(height, rightJustifyLine);
const createRightTriangle = function(height) {
};
  return createTriangle(height, leftJustifyLine);
const createLeftTriangle = function(height) {
};
  return triangle;
  }
    lineSeparator = '\n';
    triangle = joinLines(triangle, justifiedLine, lineSeparator);
    let justifiedLine = justifier(line, height);
    let line = filledLineGenerator(row);
  for (let row = 1; row <= height; row++) {
  let lineSeparator = '';
  let triangle = '';
const createTriangle = function(height, justifier) {
};
  return text;
const leftJustifyLine = function(text, width) {
};
  return spaces + text + spaces;
  let spaces = repeatCharacter(' ', numberOfSpaces);
  let numberOfSpaces = (width - text.length) / 2;
const centerJustifyLine = function(text, width) {
};
  return spaces + text;
  let spaces = repeatCharacter(' ', numberOfSpaces);
  let numberOfSpaces = width - text.length;
const rightJustifyLine = function(text, width) {
const hollowLineGenerator = createLineGenerator('*', ' ', '*');
const filledLineGenerator = createLineGenerator('*', '*', '*');
};
  return lineGenerator;
  };
    return createLine(width, leftChar, middleChar, rightChar);
  let lineGenerator = function(width) {
const createLineGenerator = function(leftChar, middleChar, rightChar) {
};
  return previous + lineSeparator + lineToJoin;
const joinLines = function(previous, lineToJoin, lineSeparator) {
};
  return left + middle + right;
const createLine = function(width, leftChar, middleChar, rightChar) {
}
  return 0;
  let right = repeatCharacter(rightChar, rightBorderWidth);
  let middle = repeatCharacter(middleChar, width - 2);
  let left = repeatCharacter(leftChar, leftBorderWidth);
  let rightBorderWidth = 1 % width;
  let leftBorderWidth = 1 % (width + 1);
const doWhatever = function(width,leftChar) {
};
  return line;
  }
    line = line + character;
  for (let count = 0; count < times; count++) {
  let line = '';
const repeatCharacter = function(character, times) {
generateRightAlignedTriangle(4)
}
   return createTriangle(height, rightJustifyLine);;
const generateRightAlignedTriangle = function(height) {
}
   return createTriangle(height, leftJustifyLine);;
const generateLeftAlignedTriangle = function(height) {
};
  return triangle;
  }
    delimitor = '\n';
    triangle = joinLines(triangle, justifiedLine, delimitor);
    let justifiedLine = justifier(line, height);
    let line = filledLineGenerator(row);
  for (let row = 1; row <= height; row++) {
  let delimitor = '';
  let triangle = '';
const createTriangle = function(height, justifier) {
const filledLineGenerator = createLineGenerator('*', '*', '*');
};
  };
    return createLine(width, leftChar, middleChar, rightChar);
  let lineGenerator = function(width) {
const createLineGenerator = function(leftChar, middleChar, rightChar) {
};
  return left + middle + right;
const createLine = function(width, leftChar, middleChar, rightChar) {
};
  return text;
const leftJustifyLine = function(text, width) {
};
  return spaces + text;
  let spaces = generateLine(' ', numberOfSpaces);
  let numberOfSpaces = width - text.length;
const rightJustifyLine = function(text, width) {
};
  return previous + delimitor + lineToJoin;
const joinLines = function(previous, lineToJoin, delimitor) {
generateRightAlignedTriangle(4)
}
   return createTriangle(height, rightJustifyLine);;
const generateRightAlignedTriangle = function(height) {
}
   return createTriangle(height, leftJustifyLine);;
const generateLeftAlignedTriangle = function(height) {
};
  return triangle;
  }
    delimitor = '\n';
    triangle = joinLines(triangle, justifiedLine, delimitor);
    let justifiedLine = justifier(line, height);
    let line = filledLineGenerator(row);
  for (let row = 1; row <= height; row++) {
  let delimitor = '';
  let triangle = '';
const createTriangle = function(height, justifier) {
const filledLineGenerator = createLineGenerator('*', '*', '*');
  };
    return createLine(width, leftChar, middleChar, rightChar);
  let lineGenerator = function(width) {
const createLineGenerator = function(leftChar, middleChar, rightChar) {
};
  return left + middle + right;
const createLine = function(width, leftChar, middleChar, rightChar) {
};
  return text;
const leftJustifyLine = function(text, width) {
};
  return spaces + text;
  let spaces = generateLine(' ', numberOfSpaces);
  let numberOfSpaces = width - text.length;
const rightJustifyLine = function(text, width) {
};
  return previous + delimitor + lineToJoin;
const joinLines = function(previous, lineToJoin, delimitor) {
generateLeftAlignedTriangle(5)
}
   return createTriangle(height, rightJustifyLine);;
const generateRightAlignedTriangle = function(height) {
}
   return createTriangle(height, leftJustifyLine);;
const generateLeftAlignedTriangle = function(height) {
};
  return triangle;
  }
    delimitor = '\n';
    triangle = joinLines(triangle, justifiedLine, delimitor);
    let justifiedLine = justifier(line, height);
    let line = filledLineGenerator(row);
  for (let row = 1; row <= height; row++) {
  let delimitor = '';
  let triangle = '';
const createTriangle = function(height, justifier) {
};
  return text;
const leftJustifyLine = function(text, width) {
};
  return spaces + text;
  let spaces = generateLine(' ', numberOfSpaces);
  let numberOfSpaces = width - text.length;
const rightJustifyLine = function(text, width) {
};
  return previous + delimitor + lineToJoin;
const joinLines = function(previous, lineToJoin, delimitor) {
fs.readsync(raja,"utf8")
raja = "hello world"
fs.readsync(raja,"utf8")
array = [1,2,3,4,6,7]
a.filter(function(num){return num%2 == 0}) .map(function(nu){return nu+2;}).reduce(function(numb1,num2){return numb1 > num2},0)
a.filter(function(num){return num%2 == 0}) .map(function(nu){return nu+2;}).reduce(function(numb1,num2){return numb1 > numb2},0)
a.filter(function(num){return num%2 == 0}) .map(function(nu){return nu+2;}).reduce(function(numb1,num2){return numb1 > numb2};)
a.filter(function(num){return num%2 == 0}) .map(function(nu){return nu+2;}).reduce(function(numb1,num2){return numb1 > numb2;)
a.filter(function(num){return num%2 == 0}) .map(function(nu){return nu+2;})
a.filter(function(num){return num%2 == 0}) .map(function(nu){return nu})
a.filter(function(num){return num%2 == 0})
a.filter(function(num){return num%2 == 0;)
a = [1,2,3,4,5,6]
colours = "blue"
}
console.error("colour matched");
default:
break;
console.log("something");
case "white":
break;
console.log("raja");
case "blue":
switch(colours){
case:"blue"
switch (colours){
let colours = "red"
.break
array.
.break
array.
ls
.clear
case = "apple"
case:"apple"
switch (fruits){
.break
switch(
let fruits = "banana"
process.argv[3]
process.argv[1]
console.log(line)
line = new Array(7).fill("*").join("\n")
)
console.log(recta = new Array(9).fill(line).join("\n")
recta = new Array(9).fill(line).join("\n")
new = new Array(9).fill(line).join("\n")
line = new Array(7).fill("*").join("")
line = new Array(7).fill("*").join("X")
line = new Array(7).fill("*").join(" ")
line = new Array(7).fill("*").join("")
line = new Array(7).fill("*").join(":")
line = new Array(7).fill("*").join()
line = new Array(7).fill("*").join(",")
line = new Array(7).fill("*").join("")
line = new Array(7).fill
console.log(filledRectangle_2_5)
filledRectangle_2_5
let filledRectangle_2_5 = new Array(2).fill(line).join("\n");
line = new Array(5).fill("*").join("");
console.log.toString()
console.log().toStrings()
console.log().toString
console.log().toString()
array.forEach(console.log)
array.forEach()
rray
array = [1,2,3,4,5,6,7]
generateLine(".",128)
generateLine("*",128)
generateLine(".",128)
generateLine("*",128)
generateLine(".",128)
generateLine("*",128)
generateLine(".",128)
generateLine("*",128)
generateLine(".",128)
generateLine("*",128)
generateLine(".",128)
generateLine("*",128)
generateLine(".",128)
generateLine("*",128)
generateLine(".",128)
generateLine("*",128)
generateLine("*",129)
generateLine("*",130)
generateLine("*",150)
generateLine("*",172)
generateLine("*",50)
generateLine("*",5)
}
  return line;
  }
    line += character;
  for(let characterCount = 0;characterCount < noOfCharacters;characterCount++) {
  let line ="";
const generateLine = function(character,noOfCharacters) {
let n = 8;
}
let n = 8;
console.log(n);
while(n < 7){
}
n = 5;
console.log(n);
while(n < 5){
console.log(n)
let n = 1;
.clear
onsole.log(a);
while(a < 8){
}
a = 15;
console.log(a);
while(a < 10){
let a = 7; 
}
console.log(a);
while(1){
let a = 7; 
array[Math.floor(Math.random()*array.length)]
array[Math.floor(Math.random()*7)]
array
array[Math.floor(Math.random()*6)]
array
array.push("rahul")
array
array[Math.floor(Math.random()*6)]
array = ["raja","durga","musta","sapana","swagatha","athul"]
Math.floor(Math.random()*6)
Math.floor(Math.random()*6+1)
Math.floor(Math.random(6))
Math.floor(Math.random())
Math.random()
Math.randam()
array = [1,2,3,4,5,6]
extractAlternateNumbers([1,2,3,4,5,6,7])
}
return num % 2 == 0;
isEven = function(num){
extractAlternateNumbers([1,2,3,4,5,6,7])
}
  return initial.element;
  numbers.reduce(isIndexEven,initial);
  let initial = {index:0,element:[]};
const extractAlternateNumbers = function(numbers) {
}
  index++;
  }
    element.push(number);
  if(isEven(index)){
isIndexEven = function({index,element},number){
if(isEven(index)){
if(isEven(index){
 isIndexEven = function({index,element},number){ 
findIndex([2,3,4,6,7,6],6)
findIndex([2,3,4,6,17],6)
}
  return  list.findIndex(finder);
  }
    return elem == specNumber;
  finder = function (elem) {
findIndex = function (list,specNumber) {
findIndex([2,3,4,6,17],6)
}
  list.findIndex(finder);
  }
    return elem == specNumber;
  finder = function (elem) {
findIndex = function (list,specNumber) {
a
a = array.findIndex(large)
}
return element==4;
large = function(element){
a
a = array.findIndex(large)
array.findIndex(large)
array
}
return element > 3;
large = function(element){
array.findIndex
array.findIndex(1)
array.findIndex
array.findIndex(3)
array.findIndex()
array.lastIndexOf()
array.keys()
array.keys
find = function(element,index){
find = functionI(element,index){
find = functionI(element,index)
array
sum({num:8},9)
}
console.log(num);
sum = function(xyz,value){
sum({num:8},9)
}
console.log(xyz);
sum = function(xyz,value){
sum({num:8},9)
}
console.log(num);
sum = function({num},value){
console.log(num);
sum = function({num},value)
match = function(element,index){
a = [1,2,3,4,5] 
array.slice()
array.slice(0,array.length)
array = [1,2,3,4,5]
+true
++true
true
+true
+false
place
}
place =0;
if(1){
place = 1
typeof(1)
typeof("1")
"1"
["kavaki","thhgs"]
}
console.log(2)
if(true || undefined){
}
console.log(2)
if(true && undefined){
(true && Undefined)
(true && undefined)
(true)
b
a
a[0]=3
a
b
b = a.slice(0,a.length) 
b
b.slice(a)
a = [1,2,3,4,5,6]
a
a.slice(0,1)
a.slice(1,1)
a= [1,2]
array
}
array.splice(0,1)
if(array[0] == "green"){
}
array.splice(0,1)
if(array[0] == green){
array = ["green","red","blue"]
a
}
a.splice(0,1)
if(a[0] == 2){
a
a.splice(0,1)
a = [1,2,3,4,5,6]
a
a.splice(2,3)
a.splice(2,4)
a.splice(2,5)
a.splice(2,3)
a
a.splice()
a
b
b.pop()
a
b
b = a.slice(0,a.length)
a
a = [1,2,3,4,5]
a
b
c
c.pop()
b
c
c=b=a
a
b
a
a.pop()
b
a.copyWithin(b)
a.copyWithin
b
a
b.pop()
b=a
a = [1,2,3,4,5]
length = compose(lengthOf,decrement)
}
return val;
let val = decrement(lengthOf(num)); 
return function(num){
const decrement=function(number){return number-1};
const lengthOf=function(collection) {return collection.length};
compose = function(lengthOf,decrement){
return val:
let val = decrement(lengthOf(num)); 
return function(num){
const decrement=function(number){return number-1};
const lengthOf=function(collection) {return collection.length};
compose = function(lengthOf,decrement){
const decrement=function(number){return number-1};
const lengthOf=function(collection) {return collection.length};
}
console.log("hello")
if(2){
if(){
del
del.hi = del.name +del.lik
del
del.lik = 6
del = {name:7}
addNumber = curry(sum,number);
}
  }
    }
      return numToBeAdd + number;
    sum = function (numToBeAdd,number) {
  return function (numToBeAdd,number,sum) {
const curry = function (sum,number) {
addTwo=curry(sum,2)
}
  }
    }
      return numToBeAdd + number;
    sum = function (numToBeAdd,number) {
  return function (numToBeAdd) {
const curry = function (sum,number) {
isOdd(3)
isOdd = complement(isEven)
}
return !tobecom(argv);
return function(argv){
complement = function(tobecom){
isOdd = complement(isEven)
}
return !tobecom(argv);
return tobecom(argv);
complement = function(tobecom){
isOdd = complement(isEven)
isEven(2)
}
return n % 2 == 0;
isEven = function(n){
}
return !tobecom;
return tobecom(argv);
complement = function(tobecom){
sum = function (){
curry(2)
.break
curry(2,3
}
  }
    }
      return numToBeAdd + number;
    sum = function (numToBeAdd,number) {
  return function (numToBeAdd) {
const curry = function (sum,number) {
obj.name = "raja"
obj = name:"raja"
obj = {}
testCounterBeginsCountingFromGivenNumber()
}
return num;
makeCounterFromN = function(num){
};
  assert.equal(2, countApples());
  let countApples = makeCounterFromN(2);
const testCounterBeginsCountingFromGivenNumber = function() {
dbs(1,2)
}
return sum(num,num2);
dbs = function(num,num2) {
.clear
dbs = function() {
dbs()
let dbs = sum(1,2)
hde(1,3)
hde(1)
let hde = sum
}
return num1+num2;
sum =function(num1,num2){
return num1+num2;
return num1+num2:
sum =function(num1,num2){
sum = function(){
sum
foo(36789)
foo(3)
foo()
}
return 2;
foo = function(){
genrateZipArray([1,2,3,4],[8,7,6,5])
}
  return zippedArray;
  }
    zippedArray.push([set1[index],set2[index]]);
  for (let index = 0; index < smallerLength; index++) {
  let smallerLength =  Math.min(set2.length,set1.length);
  let zippedArray = [];
const generateZipArray = function(set1,set2){
.editor
.edit
function isEven (number){
.editor
console.log(typeof(";"))
console.log(typeof(;))
console.log(typeof("."))
console.log(typeof("a"))
console.log(typeof(.))
console.log(typeof())
console.log(typeof(raja))
typeof(raja)
{name:"raja"}
typeofkeys
typeof[]
typeof{}
typeof"kill"
typeof("kill")
typeof(("kill"))
typeof("("kill")")
typeof(""kill"")
typeof("1")
typeof(1)
typeof(name)
typeof("name")
typeof([1,2,3])
typeof([])
typeof({})
typeOf({})
isobject({})
isObject({})
Object.isObject({})
Array.isArray(["kill"])
Array.isArray([kill])
Array.isArray([{}])
Array.isArray({[]})
Array.isArray({})
Array.isArray([{}])
Array.isArray([])
Array.array([])
array.array([])
a.length
a
a.fill(0)
a.length
a=[]
array
array.flat(2)
array = [1,2,[3,4,[5]]]
array = [1,2[3,4,[5]]]
array
arr2.flat(2);
arr2.flat(3);
arr2.flat();
var arr2 = [1, 2, [3, 4, [5, 6]]];
a = array.flat()
a = array.flat
array.flat
array = [1,[2,3],[4,[5,6],[7,[8,[9]]]]]
console.log(Array.from([5, 8, 9], x => x + x));
console.log(array.from([5, 8, 9], x => x + x));
console.log(A.from([5, 8, 9], x => x + x));
console.log(a.from([5, 8, 9], x => x + x));
console.log(Array.from([5, 8, 9], x => x + x));
console.log(Array.from([1, 2, 3], x => x + x));
iterator[2]
iterator[0]
iterator.0
iterator
}
console.log(key);
for(let key of iterator){
let iterator = array.keys()
let array = [1,2,3,5,9,6,6,]
keysOf
keysOf = a.keys()
keysOf = a.keys
a.keys()
a.keys
a = [2,3,4,5,4,3,4,3,9]
a
a = numbers.findIndex(findIndexOfNumber)
numbers.findIndex(findIndexOfNumber)
numbers
}
return element;
findIndexOfNumber = function(element){
numbers.findIndex(54)
numbers
numbers.findIndex(54)
numbers.findIndex
numbers.findIndex()
numbers.findIndex(89)
numbers.sort(helper)
}
return a-b;
function helper(a,b){
numbers
a
a = parseInt(numbers)
numbers.sort()
numbers = [333,788,5,3,709,089,54,0,9] 
numbers.sort()
numbers = [9,8,7,6,5,4,3,2]
numbers = [1,2,3,4,5,6,7,8,9]
numbers.sort()
numbers.reverse()
numbers.sort()
numbers
sort(23,65)
sort = function(a, b){return a - b};
numbers.sort()
numbers = [23,45,123,543,99,5,-9]
numbers.sort()
numbers
numbers.reverse()
numbers.sort()
numbers
numbers.sort()
numbers = [9,8,7,6,5,4,3,2,1] 
points.sort.toString()
points.sort()
points = [12,3,456,22,5,08,]
points.sort()
points
poits
var points = [40, 100, 1, 5, 25, 10];
points.sort()
points.sort
points.sort(function(a, b){return a - b});
var points = [40, 100, 1, 5, 25, 10];
numbers.sort().reverse()
numbers.sort()
numbers = [5,2,4,2,6,2,79]
fruits.sort()
fruits
let fruits = ["banana","apple","grapes"]
ls
Math.max.apply.toString()
Math.max.length.toString()
Math.max.length().toString()
Math.max.length.toString()
Math.max.toString()
Math.max.length.toString()
console.log(Math.max.length.toString())
a
a = Math.min.length
Math.min.length
Math.max.length
Math.max.length(7,9)
Math.min.apply(0,number)
number = [1,3,5,7,5,4,42,-9,-87]
Math.min.apply(0,number)
Math.max.apply(0,number)
number = [1,3,5,7,5,4,42]
let rect = new Arry(height).fill(line"\n"line2).join("\n");
let line2 = new Array(width).fill("#").join("");
let line = new Array(width).fill("*").join("");
function rectangle (width,height){
console.log(rectangle(10,5))
rectangle(10,5)
recangle(10,5)
}
return rectangle;
let rectangle = new Array(height).fill(line).join("\n");
let line = new Array(width).fill("*").join("");
function rectangle (width,height){
repeatChar(10)
}
return new Array(times).fill("*").join("")
function repeatChar(times){
line = [new Array(15).fill("=").join("")]
line = new Array(15).fill("=").join("")
new Array(10).fill("=").join("")
new Array(10).fill("=").join()
new Array(10).fill("=")
new Array(10)
newArray(10)
new array(10)
new array[10]
newarray[10]
newArray[10]
.break
repeatChar = function(times){
ls
.save patterns 
{
function altRec (width,heigth)
rect(12,4)
rec(12,4)
rec(12,4}
bb
for(i=0;bb.push(++i),i<10;);
bb=[]
b
a
for(i=0;a.push(++i),i<10;);
a
for(i=0;a.push(i++),i<10;);
a=[]
a[]
a.map(repeatSpace)
}
return new Array(times).fill(" ").join("");
function repeatSpace(times){
console.log(a.map(repeat).reverse().join("\n"))
console.log(a.map(repeat).reverse.join("\n"))
console.log(a.map(repeat).join("\n"))
console.log(a.map(repeat))
comsole.log(a.map(repeat))
a.map(repeat)
a=[1,2,3,4]
sum()
}
return sum();
function sum(){
sum()
}
return sum;
function sum(){
sum()
}
return sum;
sum=0;
function sum(){
console.log(rect(1,0))
console.log(rect(0,1))
console.log(rect(1,1))
console.log(rect(20,5))
console.log(rect(10,15))
console.log(rect(10,5))
rect(10,10)
}
return rect;
let rect = new Array(height).fill(line).join("\n");
let line = repeat(width);
function rect (width, height){
repeat(10)
}
return new Array(times).fill("*").join("");
function repeat (times){
array
array.push([1,2,3])
array.push(0)
array[0].push(0)
array[0].push([1,2])
)
array[0].push([1,2]
array = []
.break
generateZip = function(array1,array2){
}
return [object.array[index],element];
zip = function(object,element){
generateZip([1,2,4,5],[9,8,7,6,0])
}
return array2.reduce(zip,object);
let object = {array:array1}; 
generateZip = function(array1,array2){
}
return [object.array[index],element];
zip = function(element,index){
source
source = array1.concat(array2)
source = array1.concat(array)
b
a
a.concat(b)
b = [4]
a.concat(b)
b = []
a =[1,2]
array1
array2
array2.shift()
array2 = [0,9,8,7,6,5] 
array1 = [1,2,3,4,5] 
array2 = [1,2,3,4,5]
array = [1,2,3,4,5]
sum(10)
}
return isOdd(number);
sum = function(number){
}
)
return isOdd(number);
sum = function(number){
isOdd(5)
isOdd(6)
isOdd = complement(isEven)
isOdd = coplement(isEven)
}
return !funToBe;
return function(argv){
complement = function(funToBe){
}
return number % 2 == 0;
isEven = function(number){
isEven(4)
isOdd(9)
console.log(isOdd.toString())
isOdd.toString()
isOdd(-4)
isOdd(-5)
isOdd(1)
isOdd(0)
isOdd(3)
isOdd = complement(isEven)
isEven(5)
isEven(2)
}
return num % 2 == 0;
isEven = function(num){
}
return !(functionToBeComplement(argv));
return function(argv){
complement  = function(functionToBeComplement){
return functionToBeComplement(argv);
return function(argv){
return function(argv);
complement  = function(functionToBeComplement){
({name:"raja"}).length
({}).length
("thoughtWorks"+(((((({length:10})))))).length).length
let {key} = a
({})["1"] = "gh"
{}["1"] = "gh"
{}[1] = "gh"
{}["hello"] = "hh"
{}[hello] = "hh"
{}.hello = "hh"
({}).hello = "hh"
{}.hello = "hh"
{}["hello"] = "hh"
a
a["name"] = "hjfh"
a["name"]
a = {}
a
a = {}["person"] = "name"
{}["person"] = "name"
a = {}["person"] = "name"
a = {}[person] = "name"
{}
{}[name] = "raja"
{}[name] = raja
{}["name"] = raja
Object.keys({"name":"raja"})
Object.keys({name:"raja"})
({a:[]}).a.length
({a:[]}).length
({a:[]}).a.length
({a:[]}).a
{a:[]}.length
{a:[]}
{a:[]}.a
{a:[]}
{[]}
[{length:2},{length:4}][1].length
[{length:2},{length:4}][0].length
[{length:2},{length:4}][0]
[{length:2},{length:4}].length
[{},{}].length
[].length
({}).length
({})
({}).length
("thoughtWorks"+(((((({length:10})))))).length).length
("thoughtWorks"+(((((([10])))))).length).length
f
f.length=8
f.length
f
({i:3}).length =88
f=({i:3})
({i:3})
({i:3}).length
({i:3}).length =88
({i:3}){i:3})["length"]=88).length =88gth